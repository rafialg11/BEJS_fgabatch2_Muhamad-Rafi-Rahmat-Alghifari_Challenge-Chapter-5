// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}


model User {
  id    String @id @default(cuid())
  name  String 
  email String @unique
  password String
  phone String @unique
  Profile Profile?
  Address Address?
  BankAccount BankAccount[]
}

model Profile {
  id    String @id @default(cuid())
  birth_date DateTime
  birth_place String
  gender String
  identity_number String @unique
  identity_type String
  user_id String @unique
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade) 
}

model Address {
  id    String @id @default(cuid())
  street String
  post_code String
  village String
  district String
  city String
  province String
  user_id String @unique
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model BankAccount {
  id    String @id @default(cuid())
  bank_name String
  account_number String @unique
  account_type String
  pin String
  balance Int @default(0)
  user_id String
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sentTransaction  Transaction[] @relation("SentTransactions")
  receivedTransaction  Transaction[] @relation("ReceivedTransactions")
}

model Transaction {
  id    String @id @default(cuid())
  amount Int
  date DateTime
  sender_account_id String   
  receiver_account_id String
  description String?
  transfer_purpose String?   
  sender_account BankAccount @relation("SentTransactions", fields: [sender_account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  receiver_account BankAccount @relation("ReceivedTransactions", fields: [receiver_account_id], references: [id], onDelete: Cascade, onUpdate: Cascade)   
}